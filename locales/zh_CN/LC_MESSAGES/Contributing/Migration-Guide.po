# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 10:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/Contributing/Migration-Guide.rst:6
msgid "Migration guide from ROS 1"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:10
msgid "Table of Contents"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:12
msgid "There are two different kinds of package migrations:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:14
msgid ""
"Migrating the source code of an existing package from ROS 1 to ROS 2 with"
" the intent that a significant part of the source code will stay the same"
" or at least similar. An example for this could be `pluginlib "
"<https://github.com/ros/pluginlib>`_ where the source code is maintained "
"in different branches within the same repository and commonly patches can"
" be ported between those branches when necessary."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:16
msgid ""
"Implementing the same or similar functionality of a ROS 1 package for ROS"
" 2 but with the assumption that the source code will be significantly "
"different. An example for this could be `roscpp "
"<https://github.com/ros/ros_comm/tree/melodic-devel/clients/roscpp>`_ in "
"ROS 1 and `rclcpp <https://github.com/ros2/rclcpp/tree/master/rclcpp>`_ "
"in ROS 2 which are separate repositories and don't share any code."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:19
msgid ""
"This article focuses on the former case and describes the high-level "
"steps to migrate a ROS 1 package to ROS 2. It does not aim to be a step-"
"by-step migration instruction and is not considered the *final* "
"\"solution\". Future versions will aim to make migration smoother and "
"less effort up to the point of maintaining a single package from the same"
" branch for ROS 1 as well as ROS 2."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:24
msgid "Prerequisites"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:26
msgid ""
"Before being able to migrate a ROS 1 package to ROS 2 all of its "
"dependencies must be available in ROS 2."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:29
msgid "Migration steps"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:36
msgid "Package manifests"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:38
msgid ""
"ROS 2 doesn't support format 1 of the package specification but only "
"newer format versions (2 and higher). Therefore the ``package.xml`` file "
"must be updated to at least format 2 if it uses format 1. Since ROS 1 "
"supports all formats it is safe to perform that conversion in the ROS 1 "
"package."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:42
msgid ""
"Some packages might have different names in ROS 2 so the dependencies "
"might need to be updated accordingly."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:45
msgid "Metapackages"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:47
msgid ""
"ROS 2 doesn't have a special package type for metapackages. Metapackages "
"can still exist as regular packages that only contain runtime "
"dependencies. When migrating metapackages from ROS 1, simply remove the "
"``<metapackage />`` tag in your package manifest."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:52
msgid "Message, service, and action definitions"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:54
msgid ""
"Message files must end in ``.msg`` and must be located in the subfolder "
"``msg``. Service files must end in ``.srv`` and must be located in the "
"subfolder ``srv``. Actions files must end in ``.action`` and must be "
"located in the subfolder ``action``."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:58
msgid ""
"These files might need to be updated to comply with the `ROS Interface "
"definition "
"<https://design.ros2.org/articles/interface_definition.html>`__. Some "
"primitive types have been removed and the types ``duration`` and ``time``"
" which were builtin types in ROS 1 have been replaced with normal message"
" definitions and must be used from the `builtin_interfaces "
"<https://github.com/ros2/rcl_interfaces/tree/master/builtin_interfaces>`__"
" package. Also some naming conventions are stricter than in ROS 1."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:62
msgid "In your ``package.xml``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:65
msgid "Add ``<buildtool_depend>rosidl_default_generators</buildtool_depend>``."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:66
msgid "Add ``<exec_depend>rosidl_default_runtime</exec_depend>``."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:67
msgid ""
"For each dependent message package, add "
"``<depend>message_package</depend>``."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:69
msgid "In your ``CMakeLists.txt``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:71
msgid "Start by enabling C++14"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:78
msgid "Add ``find_package(rosidl_default_generators REQUIRED)``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:79
msgid ""
"For each dependent message package, add ``find_package(message_package "
"REQUIRED)`` and replace the CMake function call to ``generate_messages`` "
"with ``rosidl_generate_interfaces``."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:81
msgid ""
"This will replace ``add_message_files`` and ``add_service_files`` listing"
" of all the message and service files, which can be removed."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:84
msgid "Build system"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:86
msgid ""
"The build system in ROS 2 is called `ament "
"<https://design.ros2.org/articles/ament.html>`__ and the build tool is  "
"`colcon <../Tutorials/Colcon-Tutorial/>`. Ament is built on CMake: "
"``ament_cmake`` provides CMake functions to make writing "
"``CMakeLists.txt`` files easier."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:91
msgid "Build tool"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:93
msgid ""
"Instead of using ``catkin_make``, ``catkin_make_isolated`` or ``catkin "
"build`` ROS 2 uses the command line tool `colcon "
"<https://design.ros2.org/articles/build_tool.html>`__ to build and "
"install a set of packages."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:96
msgid "Pure Python package"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:98
msgid ""
"If the ROS 1 package uses CMake only to invoke the ``setup.py`` file and "
"does not contain anything beside Python code (e.g. also no messages, "
"services, etc.) it should be converted into a pure Python package in ROS "
"2:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:102
msgid "Update or add the build type in the ``package.xml`` file:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:111
msgid "Remove the ``CMakeLists.txt`` file"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:114
msgid "Update the ``setup.py`` file to be a standard Python setup script"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:116
msgid ""
"ROS 2 supports Python 3 only. While each package can choose to also "
"support Python 2 it must invoke executables with Python 3 if it uses any "
"API provided by other ROS 2 packages."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:120
msgid "Update the *CMakeLists.txt* to use *ament_cmake*"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:122
msgid "Apply the following changes to use ``ament_cmake`` instead of ``catkin``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:126
msgid "Set the build type in the ``package.xml`` file export section:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:135
msgid ""
"Replace the ``find_package`` invocation with ``catkin`` and the "
"``COMPONENTS`` with:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:145
msgid "Move and update the ``catkin_package`` invocation with:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:149
msgid ""
"Invoke ``ament_package`` instead but **after** all targets have been "
"registered."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:152
msgid ""
"The only valid argument for `ament_package "
"<https://github.com/ament/ament_cmake/blob/master/ament_cmake_core/cmake/core/ament_package.cmake>`__"
" is ``CONFIG_EXTRAS``. All other arguments are covered by separate "
"functions which all need to be invoked *before* ``ament_package``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:155
msgid ""
"Instead of passing ``CATKIN_DEPENDS ...`` call "
"``ament_export_dependencies(...)`` before."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:156
msgid ""
"Instead of passing ``INCLUDE_DIRS ...`` call "
"``ament_export_include_directories(...)`` before."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:157
msgid ""
"Instead of passing ``LIBRARIES ...`` call ``ament_export_libraries(...)``"
" before."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:160
msgid ""
"**TODO document ament_export_targets (``ament_export_interfaces`` in "
"Eloquent and older)?**"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:163
msgid ""
"Replace the invocation of ``add_message_files``, ``add_service_files`` "
"and ``generate_messages`` with `rosidl_generate_interfaces "
"<https://github.com/ros2/rosidl/blob/master/rosidl_cmake/cmake/rosidl_generate_interfaces.cmake>`__."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:167
msgid ""
"The first argument is the ``target_name``. If you're building just one "
"library it's ``${PROJECT_NAME}``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:171
msgid "Followed by the list of message filenames, relative to the package root."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:174
msgid ""
"If you will be using the list of filenames multiple times, it is "
"recommended to compose a list of message files and pass the list to the "
"function for clarity."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:177
msgid ""
"The final multi-value-keyword argument fpr ``generate_messages`` is "
"``DEPENDENCIES`` which requires the list of dependent message packages."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:187
msgid ""
"Remove any occurrences of the *devel space*. Related CMake variables like"
" ``CATKIN_DEVEL_PREFIX`` do not exist anymore."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:191
msgid ""
"The ``CATKIN_DEPENDS`` and ``DEPENDS`` arguments are passed to the new "
"function `ament_export_dependencies "
"<https://github.com/ament/ament_cmake/blob/master/ament_cmake_export_dependencies/cmake/ament_export_dependencies.cmake>`__."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:192
msgid "``CATKIN_GLOBAL_BIN_DESTINATION``: ``bin``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:193
msgid "``CATKIN_GLOBAL_INCLUDE_DESTINATION``: ``include``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:194
msgid "``CATKIN_GLOBAL_LIB_DESTINATION``: ``lib``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:195
msgid "``CATKIN_GLOBAL_LIBEXEC_DESTINATION``: ``lib``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:196
msgid "``CATKIN_GLOBAL_SHARE_DESTINATION``: ``share``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:197
msgid "``CATKIN_PACKAGE_BIN_DESTINATION``: ``lib/${PROJECT_NAME}``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:198
msgid "``CATKIN_PACKAGE_INCLUDE_DESTINATION``: ``include/${PROJECT_NAME}``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:199
msgid "``CATKIN_PACKAGE_LIB_DESTINATION``: ``lib``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:200
msgid "``CATKIN_PACKAGE_SHARE_DESTINATION``: ``share/${PROJECT_NAME}``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:203
msgid "Unit tests"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:205
msgid "If you are using gtest:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:207
msgid ""
"Replace ``CATKIN_ENABLE_TESTING`` with ``BUILD_TESTING``. Replace "
"``catkin_add_gtest`` with ``ament_add_gtest``."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:231
msgid ""
"Add ``<test_depend>ament_cmake_gtest</test_depend>`` to your "
"``package.xml``."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:239
msgid "Linters"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:241
msgid ""
"In ROS 2 we are working to maintain clean code using linters. The styles "
"for different languages are defined in our `Developer Guide <Developer-"
"Guide>`."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:244
msgid ""
"If you are starting a project from scratch it is recommended to follow "
"the style guide and turn on the automatic linter unit tests by adding "
"these lines just below ``if(BUILD_TESTING)`` (until alpha 5 this was "
"``AMENT_ENABLE_TESTING``)."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:251
msgid ""
"You will also need to add the following dependencies to your "
"``package.xml``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:259
msgid "Continue to use ``catkin`` in CMake"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:261
msgid ""
"ROS 2 uses ament as the build system but for backward compatibility ROS 2"
" has a package called ``catkin`` which provides almost the same API as "
"catkin in ROS 1. In order to use this backward compatibility API the "
"``CMakeLists.txt`` must only be updated to call the function "
"``catkin_ament_package()`` *after* all targets."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:264
msgid ""
"**NOTE: This has not been implemented yet and is only an idea at the "
"moment. Due to the number of changes related to dependencies it has not "
"yet been decided if this compatibility API is useful enough to justify "
"the effort.**"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:268
msgid "Update source code"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:271
msgid "Messages, services, and actions"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:273
msgid ""
"The namespace of ROS 2 messages, services, and actions use a subnamespace"
" (``msg``, ``srv``, or ``action``, respectively) after the package name. "
"Therefore an include looks like: ``#include "
"<my_interfaces/msg/my_message.hpp>``. The C++ type is then named: "
"``my_interfaces::msg::MyMessage``."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:277
msgid ""
"Shared pointer types are provided as typedefs within the message structs:"
" ``my_interfaces::msg::MyMessage::SharedPtr`` as well as "
"``my_interfaces::msg::MyMessage::ConstSharedPtr``."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:279
msgid ""
"For more details please see the article about the `generated C++ "
"interfaces "
"<https://design.ros2.org/articles/generated_interfaces_cpp.html>`__."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:281
msgid "The migration requires includes to change by:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:284
msgid ""
"inserting the subfolder ``msg`` between the package name and message "
"datatype"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:285
msgid "changing the included filename from CamelCase to underscore separation"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:286
msgid "changing from ``*.h`` to ``*.hpp``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:297
msgid ""
"The migration requires code to insert the ``msg`` namespace into all "
"instances."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:300
msgid "Use of service objects"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:302
msgid ""
"Service callbacks in ROS 2 do not have boolean return values. Instead of "
"returning false on failures, throwing exceptions is recommended."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:323
msgid "Usages of ros::Time"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:325
msgid "For usages of ``ros::Time``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:327
msgid "Replace all instances of ``ros::Time`` with ``rclcpp::Time``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:329
msgid "If your messages or code makes use of std_msgs::Time:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:331
msgid "Convert all instances of std_msgs::Time to builtin_interfaces::msg::Time"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:333
msgid ""
"Convert all ``#include \"std_msgs/time.h`` to ``#include "
"\"builtin_interfaces/msg/time.hpp\"``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:335
msgid ""
"Convert all instances using the std_msgs::Time field ``nsec`` to the "
"builtin_interfaces::msg::Time field ``nanosec``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:338
msgid "Usages of ros::Rate"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:340
msgid ""
"There is an equivalent type ``rclcpp::Rate`` object which is basically a "
"drop in replacement for ``ros::Rate``."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:343
msgid "ROS client library"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:351
msgid "**NOTE: Others to be written**"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:354
msgid "Boost"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:356
msgid ""
"Much of the functionality previously provided by Boost has been "
"integrated into the C++ standard library. As such we would like to take "
"advantage of the new core features and avoid the dependency on boost "
"where possible."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:360
msgid "Shared Pointers"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:362
msgid "To switch shared pointers from boost to standard C++ replace instances of:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:365
msgid "``#include <boost/shared_ptr.hpp>`` with ``#include <memory>``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:366
msgid "``boost::shared_ptr`` with ``std::shared_ptr``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:368
msgid ""
"There may also be variants such as ``weak_ptr`` which you want to convert"
" as well."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:370
msgid ""
"Also it is recommended practice to use ``using`` instead of ``typedef``. "
"``using`` has the ability to work better in templated logic. For details "
"`see here <https://stackoverflow.com/questions/10747810/what-is-the-"
"difference-between-typedef-and-using-in-c11>`__"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:375
msgid "Thread/Mutexes"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:377
msgid ""
"Another common part of boost used in ROS codebases are mutexes in "
"``boost::thread``."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:380
msgid ""
"Replace ``boost::mutex::scoped_lock`` with "
"``std::unique_lock<std::mutex>``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:381
msgid "Replace ``boost::mutex`` with ``std::mutex``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:382
msgid "Replace ``#include <boost/thread/mutex.hpp>`` with ``#include <mutex>``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:385
msgid "Unordered Map"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:387
#: ../../source/Contributing/Migration-Guide.rst:396
msgid "Replace:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:390
msgid "``#include <boost/unordered_map.hpp>`` with ``#include <unordered_map>``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:391
msgid "``boost::unordered_map`` with ``std::unordered_map``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:394
msgid "function"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:399
msgid "``#include <boost/function.hpp>``  with ``#include <functional>``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:400
msgid "``boost::function`` with ``std::function``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:403
msgid "Parameters"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:405
msgid ""
"In ROS 1, parameters are associated with a central server that allowed "
"retrieving parameters at runtime through the use of the network APIs. In "
"ROS 2, parameters are associated per node and are configurable at runtime"
" with ROS services."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:408
msgid ""
"See `ROS 2 Parameter design document "
"<https://design.ros2.org/articles/ros_parameters.html>`_ for more details"
" about the system model."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:410
msgid ""
"See `ROS 2 CLI usage <../Tutorials/Parameters/Understanding-"
"ROS2-Parameters>` for a better understanding of how the CLI tools work "
"and its differences with ROS 1 tooling."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:412
msgid ""
"See :doc:`../How-To-Guides/Parameters-YAML-files-migration-guide` to see "
"how YAML parameter files are parsed in ROS 2 and their differences with "
"ROS implementation."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:415
msgid "Launch files"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:417
msgid ""
"While launch files in ROS 1 are always specified using `.xml "
"<https://wiki.ros.org/roslaunch/XML>`__ files, ROS 2 supports Python "
"scripts to enable more flexibility (see `launch package "
"<https://github.com/ros2/launch/tree/master/launch>`__) as well as XML "
"and YAML files. See `separate tutorial <../How-To-Guides/Launch-files-"
"migration-guide>` on migrating launch files from ROS 1 to ROS 2."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:421
msgid "Example: Converting an existing ROS 1 package to use ROS 2"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:423
msgid ""
"Let's say that we have simple ROS 1 package called ``talker`` that uses "
"``roscpp`` in one node, called ``talker``. This package is in a catkin "
"workspace, located at ``~/ros1_talker``."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:428
msgid "The ROS 1 code"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:430
msgid "Here's the directory layout of our catkin workspace:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:443
msgid "Here is the content of those three files:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:445
msgid "``src/talker/package.xml``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:462
msgid "``src/talker/CMakeLists.txt``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:476
msgid "``src/talker/talker.cpp``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:505
msgid "Building the ROS 1 code"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:507
msgid ""
"We source an environment setup file (in this case for Jade using bash), "
"then we build our package using ``catkin_make install``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:517
msgid "Running the ROS 1 node"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:519
msgid ""
"If there's not already one running, we start a ``roscore``, first "
"sourcing the setup file from our ``catkin`` install tree (the system "
"setup file at ``/opt/ros/jade/setup.bash`` would also work here):"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:528
msgid ""
"In another shell, we run the node from the ``catkin`` install space using"
" ``rosrun``, again sourcing the setup file first (in this case it must be"
" the one from our workspace):"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:538
msgid "Migrating to ROS 2"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:540
msgid "Let's start by creating a new workspace in which to work:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:547
msgid ""
"We'll copy the source tree from our ROS 1 package into that workspace, "
"where we can modify it:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:554
msgid ""
"Now we'll modify the C++ code in the node. The ROS 2 C++ library, called "
"``rclcpp``, provides a different API from that provided by ``roscpp``. "
"The concepts are very similar between the two libraries, which makes the "
"changes reasonably straightforward to make."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:561
msgid "Included headers"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:563
msgid ""
"In place of ``ros/ros.h``, which gave us access to the ``roscpp`` library"
" API, we need to include ``rclcpp/rclcpp.hpp``, which gives us access to "
"the ``rclcpp`` library API:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:572
msgid ""
"To get the ``std_msgs/String`` message definition, in place of "
"``std_msgs/String.h``, we need to include ``std_msgs/msg/string.hpp``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:581
msgid "Changing C++ library calls"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:583
msgid ""
"Instead of passing the node's name to the library initialization call, we"
" do the initialization, then pass the node name to the creation of the "
"node object (we can use the ``auto`` keyword because now we're requiring "
"a C++14 compiler):"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:594
msgid ""
"The creation of the publisher and rate objects looks pretty similar, with"
" some changes to the names of namespace and methods."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:605
msgid ""
"To further control how message delivery is handled, a quality of service "
"(``QoS``) profile could be passed in. The default profile is "
"``rmw_qos_profile_default``. For more details, see the `design document "
"<https://design.ros2.org/articles/qos.html>`__ and `concept overview "
"<../Concepts/About-Quality-of-Service-Settings>`."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:612
msgid "The creation of the outgoing message is different in the namespace:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:619
msgid "In place of ``ros::ok()``, we call ``rclcpp::ok()``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:626
msgid "Inside the publishing loop, we access the ``data`` field as before:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:632
msgid ""
"To print a console message, instead of using ``ROS_INFO()``, we use "
"``RCLCPP_INFO()`` and its various cousins. The key difference is that "
"``RCLCPP_INFO()`` takes a Logger object as the first argument."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:642
msgid "Publishing the message is the same as before:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:648
msgid ""
"Spinning (i.e., letting the communications system process any pending "
"incoming/outgoing messages) is different in that the call now takes the "
"node as an argument:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:657
msgid "Sleeping using the rate object is unchanged."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:659
msgid "Putting it all together, the new ``talker.cpp`` looks like this:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:698
msgid "Changing the ``package.xml``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:700
msgid ""
"ROS 2 doesn't support format 1 of the package specification but only "
"newer format versions (2 and higher). We start by specifying the format "
"version in the ``package`` tag:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:708
msgid ""
"ROS 2 uses a newer version of ``catkin``, called ``ament_cmake``, which "
"we specify in the ``buildtool_depend`` tag:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:716
msgid ""
"In our build dependencies, instead of ``roscpp`` we use ``rclcpp``, which"
" provides the C++ API that we use."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:724
msgid ""
"We make the same addition in the run dependencies and also update from "
"the ``run_depend`` tag to the ``exec_depend`` tag (part of the upgrade to"
" version 2 of the package format):"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:735
msgid ""
"In ROS 1, we use ``<depend>`` to simplify specifying dependencies for "
"both compile-time and runtime. We can do the same in ROS 2:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:744
msgid ""
"We also need to tell the build tool what *kind* of package we are, so "
"that it knows how to build us. Because we're using ``ament`` and CMake, "
"we add the following lines to declare our build type to be "
"``ament_cmake``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:755
msgid "Putting it all together, our ``package.xml`` now looks like this:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:778
msgid ""
"**TODO: show simpler version of this file just using the ``<depend>`` "
"tag, which is enabled by version 2 of the package format (also supported "
"in ``catkin`` so, strictly speaking, orthogonal to ROS 2).**"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:783
msgid "Changing the CMake code"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:785
msgid "ROS 2 relies on a higher version of CMake:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:792
msgid ""
"ROS 2 relies on the C++14 standard. Depending on what compiler you're "
"using, support for C++14 might not be enabled by default. Using ``gcc`` "
"5.3 (which is what is used on Ubuntu Xenial), we need to enable it "
"explicitly, which we do by adding this line near the top of the file:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:802
msgid "The preferred way to work on all platforms is this:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:813
msgid ""
"Using ``catkin``, we specify the packages we want to build against by "
"passing them as ``COMPONENTS`` arguments when initially finding "
"``catkin`` itself. With ``ament_cmake``, we find each package "
"individually, starting with ``ament_cmake``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:824
msgid "System dependencies can be found as before:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:830
msgid ""
"We call ``catkin_package()`` to auto-generate things like CMake "
"configuration files for other packages that use our package. Whereas that"
" call happens *before* specifying targets to build, we now call the "
"analogous ``ament_package()`` *after* the targets:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:841
msgid ""
"The only directories that need to be manually included are local "
"directories and dependencies that are not ament packages:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:849
msgid ""
"A better alternative is to specify include directories for each target "
"individually, rather than including all the directories for all targets:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:856
msgid ""
"Similar to how we found each dependent package separately, we need to "
"link each one to the build target. To link with dependent packages that "
"are ament packages, instead of using ``target_link_libraries()``, "
"``ament_target_dependencies()`` is a more concise and more thorough way "
"of handling build flags. It automatically handles both the include "
"directories defined in ``_INCLUDE_DIRS`` and linking libraries defined in"
" ``_LIBRARIES``."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:871
msgid ""
"To link with packages that are not ament packages, such as system "
"dependencies like ``Boost``, or a library being built in the same "
"``CMakeLists.txt``, use ``target_link_libraries()``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:879
msgid ""
"For installation, ``catkin`` defines variables like "
"``CATKIN_PACKAGE_BIN_DESTINATION``. With ``ament_cmake``, we just give a "
"path relative to the installation root, like ``bin`` for executables:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:890
msgid ""
"Optionally, we can install and export the included directories for "
"downstream packages:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:898
msgid "Optionally, we can export dependencies for downstream packages:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:904
msgid "Putting it all together, the new ``CMakeLists.txt`` looks like this:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:939
msgid "**TODO: Show what this would look like with ``ament_auto``.**"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:942
msgid "Building the ROS 2 code"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:944
msgid ""
"We source an environment setup file (in this case the one generated by "
"following the ROS 2 installation tutorial, which builds in ``~/ros2_ws``,"
" then we build our package using ``colcon build``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:955
msgid "Running the ROS 2 node"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:957
msgid ""
"Because we installed the ``talker`` executable into ``bin``, after "
"sourcing the setup file, from our install tree, we can invoke it by name "
"directly (also, there is not yet a ROS 2 equivalent for ``rosrun``):"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:967
msgid "Update scripts"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:970
msgid "ROS CLI arguments"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:972
msgid ""
"Since `ROS Eloquent <../Releases/Release-Eloquent-Elusor>`, ROS arguments"
" should be scoped with ``--ros-args`` and a trailing ``--`` (the trailing"
" double dash may be elided if no arguments follow it)."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:974
msgid ""
"Remapping names is similar to ROS 1, taking on the form ``from:=to``, "
"except that it must be preceded by a ``--remap`` (or ``-r``) flag. For "
"example:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:981
msgid ""
"We use a similar syntax for parameters, using the ``--param`` (or ``-p``)"
" flag:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:988
msgid "Note, this is different than using a leading underscore in ROS 1."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:990
msgid "To change a node name use ``__node`` (the ROS 1 equivalent is ``__name``):"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:996
msgid ""
"Note the use of the ``-r`` flag. The same remap flag is needed for "
"changing the namespace ``__ns``:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1003
msgid "There is no equivalent in ROS 2 for the following ROS 1 keys:"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1005
msgid ""
"``__log`` (but ``--log-config-file`` can be used to provide a logger "
"configuration file)"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1006
msgid "``__ip``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1007
msgid "``__hostname``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1008
msgid "``__master``"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1010
msgid ""
"For more information, see the `design document "
"<https://design.ros2.org/articles/ros_command_line_arguments.html>`_."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1013
msgid "Quick reference"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1016
msgid "Feature"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1016
msgid "ROS 1"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1016
msgid "ROS 2"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1018
msgid "remapping"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1018
msgid "foo:=bar"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1018
msgid "-r foo:=bar"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1020
msgid "parameters"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1020
msgid "_foo:=bar"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1020
msgid "-p foo:=bar"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1022
msgid "node name"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1022
msgid "__name:=foo"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1022
msgid "-r __node:=foo"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1024
msgid "namespace"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1024
msgid "__ns:=foo"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1024
msgid "-r __ns:=foo"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1029
msgid "More examples and tools"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1031
msgid ""
"Launch File migrator that converts a ROS 1 XML launch file to a ROS 2 "
"Python launch file: https://github.com/aws-robotics/ros2-launch-file-"
"migrator"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1032
msgid ""
"Amazon has exposed their tools for porting ROS 1 robots to ROS 2 "
"https://github.com/awslabs/ros2-migration-"
"tools/tree/master/porting\\_tools"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1037
msgid "Licensing"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1039
msgid ""
"In ROS 2 our recommended license is the `Apache 2.0 License "
"<https://www.apache.org/licenses/LICENSE-2.0>`__. In ROS 1 our "
"recommended license was the `3-Clause BSD License "
"<https://opensource.org/licenses/BSD-3-Clause>`__."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1042
msgid ""
"For any new project we recommend using the Apache 2.0 License, whether "
"ROS 1 or ROS 2."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1044
msgid ""
"However, when migrating code from ROS 1 to ROS 2 we cannot simply change "
"the license. The existing license must be preserved for any preexisting "
"contributions."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1047
msgid ""
"To that end if a package is being migrated we recommend keeping the "
"existing license and continuing to contribute to that package under the "
"existing OSI license, which we expect to be the BSD license for core "
"elements."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1049
msgid "This will keep things clear and easy to understand."
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1052
msgid "Changing the License"
msgstr ""

#: ../../source/Contributing/Migration-Guide.rst:1054
msgid ""
"It is possible to change the license, however you will need to contact "
"all the contributors and get permission. For most packages this is likely"
" to be a significant effort and not worth considering. If the package has"
" a small set of contributors then this may be feasible."
msgstr ""

