# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 10:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:4
msgid "Writing a simple service and client (C++)"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:6
msgid "**Goal:** Create and run service and client nodes using C++."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:8
msgid "**Tutorial level:** Beginner"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:10
msgid "**Time:** 20 minutes"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:14
msgid "Contents"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:17
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:19
msgid ""
"When :doc:`nodes <./Understanding-ROS2-Nodes>` communicate using "
":doc:`services <./Services/Understanding-ROS2-Services>`, the node that "
"sends a request for data is called the client node, and the one that "
"responds to the request is the service node. The structure of the request"
" and response is determined by a ``.srv`` file."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:22
msgid ""
"The example used here is a simple integer addition system; one node "
"requests the sum of two integers, and the other responds with the result."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:26
msgid "Prerequisites"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:28
msgid ""
"In previous tutorials, you learned how to :doc:`create a workspace "
"<./Workspace/Creating-A-Workspace>` and :doc:`create a package "
"<./Creating-Your-First-ROS2-Package>`."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:31
msgid "Tasks"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:34
msgid "1 Create a package"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:36
msgid ""
"Open a new terminal and :doc:`source your ROS 2 installation "
"<./Configuring-ROS2-Environment>` so that ``ros2`` commands will work."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:38
msgid ""
"Navigate into the ``dev_ws`` directory created in a :ref:`previous "
"tutorial <new-directory>`."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:40
msgid ""
"Recall that packages should be created in the ``src`` directory, not the "
"root of the workspace. Navigate into ``dev_ws/src`` and create a new "
"package:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:47
msgid ""
"Your terminal will return a message verifying the creation of your "
"package ``cpp_srvcli`` and all its necessary files and folders."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:49
msgid ""
"The ``--dependencies`` argument will automatically add the necessary "
"dependency lines to ``package.xml`` and ``CMakeLists.txt``. "
"``example_interfaces`` is the package that includes `the .srv file "
"<https://github.com/ros2/example_interfaces/blob/master/srv/AddTwoInts.srv>`__"
" you will need to structure your requests and responses:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:59
msgid ""
"The first two lines are the parameters of the request, and below the "
"dashes is the response."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:62
msgid "1.1 Update ``package.xml``"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:64
msgid ""
"Because you used the ``--dependencies`` option during package creation, "
"you don’t have to manually add dependencies to ``package.xml`` or "
"``CMakeLists.txt``."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:66
msgid ""
"As always, though, make sure to add the description, maintainer email and"
" name, and license information to ``package.xml``."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:76
msgid "2 Write the service node"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:78
msgid ""
"Inside the ``dev_ws/src/cpp_srvcli/src`` directory, create a new file "
"called ``add_two_ints_server.cpp`` and paste the following code within:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:112
msgid "2.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:114
msgid "The first two ``#include`` statements are your package dependencies."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:116
msgid ""
"The ``add`` function adds two integers from the request and gives the sum"
" to the response, while notifying the console of its status using logs."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:129
msgid "The ``main`` function accomplishes the following, line by line:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:131
msgid "Initializes ROS 2 C++ client library:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:137
msgid "Creates a node named ``add_two_ints_server``:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:143
msgid ""
"Creates a service named ``add_two_ints`` for that node and automatically "
"advertises it over the networks with the ``&add`` method:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:150
msgid "Prints a log message when it’s ready:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:156
msgid "Spins the node, making the service available."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:163
msgid "2.2 Add executable"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:165
msgid ""
"The ``add_executable`` macro generates an executable you can run using "
"``ros2 run``. Add the following code block to ``CMakeLists.txt`` to "
"create an executable named ``server``:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:174
msgid ""
"So ``ros2 run`` can find the executable, add the following lines to the "
"end of the file, right before ``ament_package()``:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:182
msgid ""
"You could build your package now, source the local setup files, and run "
"it, but let’s create the client node first so you can see the full system"
" at work."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:185
msgid "3 Write the client node"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:187
msgid ""
"Inside the ``dev_ws/src/cpp_srvcli/src`` directory, create a new file "
"called ``add_two_ints_client.cpp`` and paste the following code within:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:241
msgid "3.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:243
msgid ""
"Similar to the service node, the following lines of code create the node "
"and then create the client for that node:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:251
msgid ""
"Next, the request is created. Its structure is defined by the ``.srv`` "
"file mentioned earlier."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:260
msgid ""
"The ``while`` loop gives the client 1 second to search for service nodes "
"in the network. If it can’t find any, it will continue waiting."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:267
msgid ""
"If the client is canceled (e.g. by you entering ``Ctrl+C`` into the "
"terminal), it will return an error log message stating it was "
"interrupted."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:274
msgid ""
"Then the client sends its request, and the node spins until it receives "
"its response, or fails."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:277
msgid "3.2 Add executable"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:279
msgid ""
"Return to ``CMakeLists.txt`` to add the executable and target for the new"
" node. After removing some unnecessary boilerplate from the automatically"
" generated file, your ``CMakeLists.txt`` should look like this:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:308
msgid "4 Build and run"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:310
msgid ""
"It's good practice to run ``rosdep`` in the root of your workspace "
"(``dev_ws``) to check for missing dependencies before building:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:314
#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:333
#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:355
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:320
#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:339
#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:361
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:322
#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:326
msgid "rosdep only runs on Linux, so you can skip ahead to next step."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:324
#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:345
#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:367
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:329
msgid ""
"Navigate back to the root of your workspace, ``dev_ws``, and build your "
"new package:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:349
msgid "colcon build --merge-install --packages-select cpp_srvcli"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:351
msgid "Open a new terminal, navigate to ``dev_ws``, and source the setup files:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:373
msgid "Now run the service node:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:379
msgid "The terminal should return the following message, and then wait:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:385
msgid ""
"Open another terminal, source the setup files from inside ``dev_ws`` "
"again. Start the client node, followed by any two integers separated by a"
" space:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:392
msgid ""
"If you chose ``2`` and ``3``, for example, the client would receive a "
"response like this:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:398
msgid ""
"Return to the terminal where your service node is running. You will see "
"that it published log messages when it received the request and the data "
"it received, and the response it sent back:"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:407
msgid "Enter ``Ctrl+C`` in the server terminal to stop the node from spinning."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:411
msgid "Summary"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:413
msgid ""
"You created two nodes to request and respond to data over a service. You "
"added their dependencies and executables to the package configuration "
"files so that you could build and run them, and see a service/client "
"system at work"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:418
msgid "Next steps"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:420
msgid ""
"In the last few tutorials you've been utilizing interfaces to pass data "
"across topics and services. Next, you'll learn how to :doc:`create custom"
" interfaces <./Custom-ROS2-Interfaces>`."
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:424
msgid "Related content"
msgstr ""

#: ../../source/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.rst:426
msgid ""
"There are several ways you could write a service and client in C++; check"
" out the ``minimal_service`` and ``minimal_client`` packages in the "
"`ros2/examples "
"<https://github.com/ros2/examples/tree/master/rclcpp/services>`_ repo."
msgstr ""

