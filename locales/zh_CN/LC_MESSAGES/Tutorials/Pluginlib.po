# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 10:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/Tutorials/Pluginlib.rst:2
msgid "Creating and Using Plugins (C++)"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:4
msgid "**Goal:** Learn to create and load a simple plugin using pluginlib"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:6
msgid "**Tutorial level:** Beginner"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:10
msgid "**Minimum Platform:** Ardent"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:14
msgid "Contents"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:17
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:19
msgid ""
"This tutorial is derived from `<http://wiki.ros.org/pluginlib>`_ and "
"`Writing and Using a Simple Plugin Tutorial "
"<http://wiki.ros.org/pluginlib/Tutorials/Writing%20and%20Using%20a%20Simple%20Plugin>`_."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:21
msgid ""
"pluginlib is a C++ library for loading and unloading plugins from within "
"a ROS package. Plugins are dynamically loadable classes that are loaded "
"from a runtime library (i.e. shared object, dynamically linked library). "
"With pluginlib, one does not have to explicitly link their application "
"against the library containing the classes -- instead pluginlib can open "
"a library containing exported classes at any point without the "
"application having any prior awareness of the library or the header file "
"containing the class definition. Plugins are useful for "
"extending/modifying application behavior without needing the application "
"source code."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:24
msgid "Prerequisites"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:26
msgid ""
"This tutorial assumes basic C++ knowledge and that you have ``pluginlib``"
" installed."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:34
msgid "Tasks"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:36
msgid ""
"In this tutorial, you will create a two new packages, one that defines "
"the base class, and the other that provides the plugins. The base class "
"will define a generic polygon class, and then our plugins will define "
"specific shapes."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:40
msgid "1 Create the Base Class Package"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:42
msgid ""
"Create a new empty package in your ``dev_ws/src`` folder with the "
"following terminal command."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:49
msgid ""
"Open your favorite editor, edit "
"``dev_ws/src/polygon_base/include/polygon_base/regular_polygon.hpp``, and"
" paste the following inside of it:"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:72
msgid ""
"This code above should be pretty self explanatory... we're creating an "
"abstract class called ``RegularPolygon``. One thing to notice is the "
"presence of the initialize method. With ``pluginlib``, a constructor "
"without parameters is required for classes so, if any parameters are "
"required, we use the initialize method to initialize the object."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:74
msgid ""
"We need to make this header available to other classes, so open "
"``dev_ws/src/polygon_base/CMakeLists.txt`` for editing. Add the following"
" lines after the ``ament_target_dependencies`` command."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:83
msgid "And add this command before the ``ament_package`` command"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:91
msgid "We will return to this package later to write our test node."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:94
msgid "2 Create the Plugin Package"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:95
msgid ""
"Now we're going to write two non-virtual implementations of our abstract "
"class. Create a second empty package in your ``dev_ws/src`` folder with "
"the following terminal command."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:102
msgid "2.1 Source code for the plugins"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:104
msgid ""
"Open ``dev_ws/src/polygon_plugins/src/polygon_plugins.cpp`` for editing, "
"and paste the following inside of it:"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:158
msgid ""
"The implementation of the Square and Triangle classes should be fairly "
"straightforward: save the side length, and use it to calculate the area. "
"The only piece that is pluginlib specific is the last three lines, which "
"invokes some magical macros that register the classes as actual plugins. "
"Let's go through the arguments to the ``PLUGINLIB_EXPORT_CLASS`` macro:"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:160
msgid ""
"The fully-qualified type of the plugin class, in this case, "
"``polygon_plugins::Square``."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:161
msgid ""
"The fully-qualified type of the base class, in this case, "
"``polygon_base::RegularPolygon``."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:164
msgid "2.2 Plugin Declaration XML"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:165
msgid ""
"The steps above make it so that instances of our plugins can be created "
"once the library they exist in is loaded, but the plugin loader still "
"needs a way to find that library and to know what to reference within "
"that library. To this end, we'll also create an XML file that, along with"
" a special export line in the package manifest, makes all the necessary "
"information about our plugins available to the ROS toolchain."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:167
msgid "Create ``dev_ws/src/polygon_plugins/plugins.xml`` with the following code:"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:180
msgid "A couple things to note:"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:182
msgid ""
"The ``library`` tag gives the relative path to a library that contains "
"the plugins that we want to export. In ROS 2, that is just the name of "
"the library. In ROS 1 it contained the prefix ``lib`` or sometimes "
"``lib/lib`` (i.e. ``lib/libpolygon_plugins``) but here it is simpler."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:183
msgid ""
"The ``class`` tag declares a plugin that we want to export from our "
"library. Let's go through its parameters:"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:185
msgid ""
"``type``: The fully qualified type of the plugin. For us, that's "
"``polygon_plugins::Square``."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:186
msgid ""
"``base_class``: The fully qualified base class type for the plugin. For "
"us, that's ``polygon_base::RegularPolygon``."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:187
msgid "``description``: A description of the plugin and what it does."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:188
msgid "``name``: There used to be a name attribute, but it is no longer required."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:191
msgid "2.3 CMake Plugin Declaration"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:192
msgid ""
"The last step is to export your plugins via ``CMakeLists.txt``. This is a"
" change from ROS 1, where the exporting was done via ``package.xml``. Add"
" the following block to your "
"``dev_ws/src/polygon_plugins/CMakeLists.txt`` after the line reading "
"``find_package(pluginlib REQUIRED)``"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:216
msgid "And before the ``ament_package`` command, add"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:228
msgid "The arguments to this CMake command are"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:230
msgid "The package for the base class, i.e. ``polygon_base``"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:231
msgid "The relative path to the Plugin Declaration xml, i.e. ``plugins.xml``"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:235
msgid "3 Use the Plugins"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:236
msgid ""
"Now its time to use the plugins. This can be done in any package, but "
"here we're going to do it in the base package. Edit "
"``dev_ws/src/polygon_base/src/area_node.cpp`` to contain the following:"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:270
msgid ""
"The ``ClassLoader`` is the key class to understand, defined in the "
"``class_loader.hpp`` `header "
"<https://github.com/ros/pluginlib/blob/ros2/pluginlib/include/pluginlib/class_loader.hpp>`_."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:272
msgid "It is templated with the base class, i.e. ``polygon_base::RegularPolygon``"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:273
msgid ""
"The first argument is a string for the package name of the base class, "
"i.e. ``polygon_base``"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:274
msgid ""
"The second argument is a string with the fully qualified base class type "
"for the plugin, i.e. ``polygon_base::RegularPolygon``"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:276
msgid ""
"There are a number of ways to instantiate an instance of the class. In "
"this example, we're using shared pointers. We just need to call "
"``createSharedInstance`` with the fully-qualified type of the plugin "
"class, in this case, ``polygon_plugins::Square``."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:278
msgid ""
"Important note: the ``polygon_base`` package in which this node is "
"defined does NOT depend on the ``polygon_plugins`` class. The plugins "
"will be loaded dynamically without any dependency needing to be declared."
" Furthermore, we're instantiating the classes with hardcoded plugin "
"names, but you can also do so dynamically with parameters, etc."
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:281
msgid "4 Build and run"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:283
msgid ""
"Navigate back to the root of your workspace, ``dev_ws``, and build your "
"new packages:"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:289
msgid "From ``dev_ws``, be sure to source the setup files:"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:293
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:299
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:305
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:311
msgid "Now run the node:"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:317
msgid "It should print"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:327
msgid "Summary"
msgstr ""

#: ../../source/Tutorials/Pluginlib.rst:329
msgid "Congratulations! You've just written and used your first plugins."
msgstr ""

