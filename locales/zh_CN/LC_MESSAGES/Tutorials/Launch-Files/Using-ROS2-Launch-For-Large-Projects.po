# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 10:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:4
msgid "Using ROS 2 launch for large projects"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:6
msgid ""
"**Goal:** Learn best practices of managing large projects using ROS 2 "
"launch files"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:8
msgid "**Tutorial level:** Intermediate"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:10
msgid "**Time:** 20 minutes"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:14
msgid "Contents"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:17
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:19
msgid ""
"This tutorial describes some tips for writing launch files for large "
"projects. The focus is on how to structure launch files so they may be "
"reused as much as possible in different situations. Additionally, it "
"covers usage examples of different ROS 2 launch tools, like parameters, "
"YAML files, remappings, namespaces, default arguments, and RViz configs."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:24
msgid "Prerequisites"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:26
msgid ""
"This tutorial uses the :doc:`turtlesim <../Turtlesim/Introducing-"
"Turtlesim>` and :doc:`turtle_tf2_py <../Tf2/Introduction-To-Tf2>` "
"packages. This tutorial also assumes you have :doc:`created a new package"
" <../Creating-Your-First-ROS2-Package>` of build type ``ament_python`` "
"called ``launch_tutorial``."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:30
msgid "Introduction"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:32
msgid ""
"Large applications on a robot typically involve several interconnected "
"nodes, each of which can have many parameters. Simulation of multiple "
"turtles in the turtle simulator can serve as a good example. The turtle "
"simulation consists of multiple turtle nodes, the world configuration, "
"and the TF broadcaster and listener nodes. Between all of the nodes, "
"there are a large number of ROS parameters that affect the behavior and "
"appearance of these nodes. ROS 2 launch files allow us to start all nodes"
" and set corresponding parameters in one place. By the end of a tutorial,"
" you will build the ``launch_turtlesim.launch.py`` launch file in the "
"``launch_tutorial`` package. This launch file will bring up different "
"nodes responsible for the simulation of two turtlesim simulations, "
"starting TF broadcasters and listener, loading parameters, and launching "
"an RViz configuration. In this tutorial, we'll go over this launch file "
"and all related features used."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:42
msgid "Writing launch files"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:45
msgid "1 Top-level organization"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:47
msgid ""
"One of the aims in the process of writing launch files should be making "
"them as reusable as possible. This could be done by clustering related "
"nodes and configurations into separate launch files. Afterwards, a top-"
"level launch file dedicated to a specific configuration could be written."
" This would allow moving between identical robots to be done without "
"changing the launch files at all. Even a change such as moving from a "
"real robot to a simulated one can be done with only a few changes."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:53
msgid ""
"We will now go over the top-level launch file structure that makes this "
"possible. Firstly, we will create a launch file that will call separate "
"launch files. To do this, let's create a ``launch_turtlesim.launch.py`` "
"file in the ``/launch`` folder of our ``launch_tutorial`` package."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:110
msgid ""
"This launch file includes a set of other launch files. Each of these "
"included launch files contains nodes, parameters, and possibly, nested "
"includes, which pertain to one part of the system. To be exact, we launch"
" two turtlesim simulation worlds, TF broadcaster, TF listener, mimic, "
"fixed frame broadcaster, and RViz nodes."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:114
msgid ""
"Design Tip: Top-level launch files should be short, consist of includes "
"to other files corresponding to subcomponents of the application, and "
"commonly changed parameters."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:116
msgid ""
"Writing launch files in the following manner makes it easy to swap out "
"one piece of the system, as we'll see later. However, there are cases "
"when some nodes or launch files have to be launched separately due to "
"performance and usage reasons."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:119
msgid ""
"Design tip: Be aware of the tradeoffs when deciding how many top-level "
"launch files your application requires."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:122
msgid "2 Parameters"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:125
msgid "2.1 Setting parameters in the launch file"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:127
msgid ""
"We will begin by writing a launch file that will start our first "
"turtlesim simulation. First, create a new file called "
"``turtlesim_world_1.launch.py``."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:166
msgid ""
"This launch file starts the ``turtlesim_node`` node, which starts the "
"turtlesim simulation, with simulation configuration parameters that are "
"defined and passed to the nodes."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:169
msgid "2.2 Loading parameters from YAML file"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:171
msgid ""
"In the second launch, we will start a second turtlesim simulation with a "
"different configuration. Now create a ``turtlesim_world_2.launch.py`` "
"file."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:201
msgid ""
"This launch file will launch the same ``turtlesim_node`` with parameter "
"values that are loaded directly from the YAML configuration file. "
"Defining arguments and parameters in YAML files make it easy to store and"
" load a large number of variables. In addition, YAML files can be easily "
"exported from the current ``ros2 param`` list. To learn how to do that, "
"refer to the :doc:`Understanding ROS 2 parameters <../Parameters"
"/Understanding-ROS2-Parameters>` tutorial."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:206
msgid ""
"Let's now create a configuration file, ``turtlesim.yaml``, in the "
"``/config`` folder of our package, which will be loaded by our launch "
"file."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:216
msgid ""
"If we now start the ``turtlesim_world_2.launch.py`` launch file, we will "
"start the ``turtlesim_node`` with preconfigured background colors."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:218
msgid ""
"To learn more about using parameters and using YAML files, take a look at"
" the :doc:`Understanding ROS 2 parameters <../Parameters/Understanding-"
"ROS2-Parameters>` tutorial."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:221
msgid "2.3 Using wildcards in YAML files"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:223
msgid ""
"There are cases when we want to set the same parameters in more than one "
"node. These nodes could have different namespaces or names but still have"
" the same parameters. Defining separate YAML files that explicitly define"
" namespaces and node names is not efficient. A solution is to use "
"wildcard characters, which act as substitutions for unknown characters in"
" a text value, to apply parameters to several different nodes."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:228
msgid ""
"Now let's create a new ``turtlesim_world_3.launch.py`` file similar to "
"``turtlesim_world_2.launch.py`` to include one more ``turtlesim_node`` "
"node."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:241
msgid ""
"Loading the same YAML file, however, will not affect the appearance of "
"the third turtlesim world. The reason is that its parameters are stored "
"under another namespace as shown below:"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:251
msgid ""
"Therefore, instead of creating a new configuration for the same node that"
" use the same parameters, we can use wildcards syntax. ``/**`` will "
"assign all the parameters in every node, despite differences in node "
"names and namespaces."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:254
msgid ""
"We will now update the ``turtlesim.yaml``, in the ``/config`` folder in "
"the following manner:"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:264
msgid ""
"Now include the ``turtlesim_world_3.launch.py`` launch description in our"
" main launch file. Using that configuration file in our launch "
"descriptions will assign ``background_b``, ``background_g``, and "
"``background_r`` parameters to specified values in ``turtlesim3/sim`` and"
" ``turtlesim2/sim`` nodes."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:268
msgid "3 Namespaces"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:270
msgid ""
"As you may have noticed, we have defined the namespace for the turlesim "
"world in the ``turtlesim_world_2.launch.py`` file. Unique namespaces "
"allow the system to start two similar nodes without node name or topic "
"name conflicts."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:277
msgid ""
"However, if the launch file contains a large number of nodes, defining "
"namespaces for each of them can become tedious. To solve that issue, the "
"``PushRosNamespace`` action can be used to define the global namespace "
"for each launch file description. Every nested node will inherit that "
"namespace automatically."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:281
msgid ""
"To do that, firstly, we need to remove the ``namespace='turtlesim2'`` "
"line from the ``turtlesim_world_2.launch.py`` file. Afterwards, we need "
"to update the ``launch_turtlesim.launch.py`` to include the following "
"lines:"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:302
msgid ""
"Finally, we replace the ``turtlesim_world_2`` to "
"``turtlesim_world_2_with_namespace`` in the ``return LaunchDescription`` "
"statement. As a result, each node in the ``turtlesim_world_2.launch.py`` "
"launch description will have a ``turtlesim2`` namespace."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:306
msgid "4 Reusing nodes"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:308
msgid "Now create a ``broadcaster_listener.launch.py`` file."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:352
msgid ""
"In this file, we have declared the ``target_frame`` launch argument with "
"a default value of ``turtle1``. The default value means that the launch "
"file can receive an argument to forward to its nodes, or in case the "
"argument is not provided, it will pass the default value to its nodes."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:355
msgid ""
"Afterwards, we use the ``turtle_tf2_broadcaster`` node two times using "
"different names and parameters during launch. This allows us to duplicate"
" the same node without conflicts."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:358
msgid ""
"We also start a ``turtle_tf2_listener`` node and set its ``target_frame``"
" parameter that we declared and acquired above."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:361
msgid "5 Parameter overrides"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:363
msgid ""
"Recall that we called the ``broadcaster_listener.launch.py`` file in our "
"top-level launch file. In addition to that, we have passed it "
"``target_frame`` launch argument as shown below:"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:375
msgid ""
"This syntax allows us to change the default goal target frame to "
"``carrot1``. If you would like ``turtle2`` to follow ``turtle1`` instead "
"of the ``carrot1``, just remove the line that defines "
"``launch_arguments``. This will assign ``target_frame`` its default "
"value, which is ``turtle1``."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:380
msgid "6 Remapping"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:382
msgid "Now create a ``mimic.launch.py`` file."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:403
msgid ""
"This launch file will start the ``mimic`` node, which will give commands "
"to one turtlesim to follow the other. The node is designed to receive the"
" target pose on the topic ``/input/pose``. In our case, we want to remap "
"the target pose from ``/turtle2/pose`` topic. Finally, we remap the "
"``/output/cmd_vel`` topic to ``/turtlesim2/turtle1/cmd_vel``. This way "
"``turtle1`` in our ``turtlesim2`` simulation world will follow "
"``turtle2`` in our initial turtlesim world."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:410
msgid "7 Config files"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:412
msgid "Let's now create a file called ``turtlesim_rviz.launch.py``."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:440
msgid ""
"This launch file will start the RViz with the configuration file defined "
"in the ``turtle_tf2_py`` package. This RViz configuration will set the "
"world frame, enable TF visualization, and start RViz with a top-down "
"view."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:444
msgid "8 Environment Variables"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:446
msgid ""
"Let's now create the last launch file called "
"``fixed_broadcaster.launch.py`` in our package."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:470
msgid ""
"This launch file shows the way environment variables can be called inside"
" the launch files. Environment variables can be used to define or push "
"namespaces for distinguishing nodes on different computers or robots."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:474
msgid "Running launch files"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:477
msgid "1 Update setup.py"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:479
msgid ""
"Open ``setup.py`` and add the following lines so that the launch files "
"from the ``launch/`` folder and configuration file from the ``config/`` "
"would be installed. The ``data_files`` field should now look like this:"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:493
msgid "2 Build and run"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:495
msgid ""
"To finally see the result of our code, build the package and launch the "
"top-level launch file using the following command:"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:501
msgid ""
"You will now see the two turtlesim simulations started. There are two "
"turtles in the first one and one in the second one. In the first "
"simulation, ``turtle2`` is spawned in the bottom-left part of the world. "
"Its aim is to reach the ``carrot1`` frame which is five meters away on "
"the x-axis relative to the ``turtle1`` frame."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:506
msgid ""
"The ``turtlesim2/turtle1`` in the second is designed to mimic the "
"behavior of the ``turtle2``."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:508
msgid "If you want to control the ``turtle1``, run the teleop node."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:514
msgid "As a result, you will see a similar picture:"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:518
msgid ""
"In addition to that, the RViz should have started. It will show all "
"turtle frames relative to the ``world`` frame, whose origin is at the "
"bottom-left corner."
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:524
msgid "Summary"
msgstr ""

#: ../../source/Tutorials/Launch-Files/Using-ROS2-Launch-For-Large-Projects.rst:526
msgid ""
"In this tutorial, you learned about various tips and practices of "
"managing large projects using ROS 2 launch files."
msgstr ""

