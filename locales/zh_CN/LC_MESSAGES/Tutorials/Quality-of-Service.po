# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 10:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/Tutorials/Quality-of-Service.rst:6
msgid "Use quality-of-service settings to handle lossy networks"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:10
msgid "Table of Contents"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:13
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:15
msgid ""
"Please read the documentation page `about QoS settings <../Concepts"
"/About-Quality-of-Service-Settings>` for background information on "
"available support in ROS 2."
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:17
msgid ""
"In this demo, we will spawn a node that publishes a camera image and "
"another that subscribes to the image and shows it on the screen. We will "
"then simulate a lossy network connection between them and show how "
"different quality of service settings handle the bad link."
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:22
msgid "Prerequisites"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:23
msgid ""
"This tutorial assumes you have a `working ROS 2 installation "
"<../Installation>` and OpenCV. See the `OpenCV documentation "
"<http://docs.opencv.org/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html"
"#table-of-content-introduction>`__ for its installation instructions. You"
" will also need the ROS package ``image_tools``."
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:29
msgid "Linux Binaries"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:35
msgid "From Source"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:44
msgid "Run the demo"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:46
msgid ""
"Before running the demo, make sure you have a working webcam connected to"
" your computer."
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:48
msgid "Once you've installed ROS 2, source your setup file:"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:52
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:58
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:64
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:70
msgid "Then run:"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:76
msgid ""
"Nothing will happen yet. ``showimage`` is a subscriber node that is "
"waiting for a publisher on the ``image`` topic."
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:79
msgid ""
"Note: you have to close the ``showimage`` process with ``Ctrl-C`` later. "
"You can't just close the window."
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:82
msgid ""
"In a separate terminal, source the install file and run the publisher "
"node:"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:88
msgid ""
"This will publish an image from your webcam. In case you don't have a "
"camera attached to your computer, there is a commandline option which "
"publishes predefined images."
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:97
msgid "In this window, you'll see terminal output:"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:106
msgid ""
"A window will pop up with the title \"view\" showing your camera feed. In"
" the first window, you'll see output from the subscriber:"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:118
msgid ""
"macOS users: If these examples do not work or you receive an error like "
"``ddsi_conn_write failed -1`` then you'll need to increase your system "
"wide UDP packet size:"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:125
msgid ""
"These changes will not persist a reboot. If you want the changes to "
"persist, add these lines to ``/etc/sysctl.conf`` (create the file if it "
"doesn't exist already):"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:133
msgid "Command line options"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:135
msgid "In one of your terminals, add a -h flag to the original command:"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:145
msgid "Add network traffic"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:149
msgid ""
"This section of the demo won't work on RTI's Connext DDS. When running "
"multiple nodes in the same host, the RTI Connext DDS implementation uses "
"shared memory along with the loopback interface. Degrading the loopback "
"interface throughput won't affect shared memory, thus traffic between the"
" two nodes won't be affected."
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:155
msgid "This next section is Linux-specific."
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:157
msgid ""
"However, for macOS and Windows you can achieve a similar effect with the "
"utilities \"Network Link Conditioner\" (part of the xcode tool suite) and"
" \"Clumsy\" (http://jagt.github.io/clumsy/index.html), respectively, but "
"they will not be covered in this tutorial."
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:159
msgid ""
"We are going to use the Linux network traffic control utility, ``tc`` "
"(http://linux.die.net/man/8/tc)."
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:165
msgid ""
"This magical incantation will simulate 5% packet loss over the local "
"loopback device. If you use a higher resolution of the images (e.g. "
"``--ros-args -p width:=640 -p height:=480``) you might want to try a "
"lower packet loss rate (e.g. ``1%``)."
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:168
msgid ""
"Next we start the ``cam2image`` and ``showimage``, and we'll soon notice "
"that both programs seem to have slowed down the rate at which images are "
"transmitted. This is caused by the behavior of the default QoS settings. "
"Enforcing reliability on a lossy channel means that the publisher (in "
"this case, ``cam2image``) will resend the network packets until it "
"receives acknowledgement from the consumer (i.e. ``showimage``)."
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:172
msgid ""
"Let's now try running both programs, but with more suitable settings. "
"First of all, we'll use the ``-p reliability:=best_effort`` option to "
"enable best effort communication. The publisher will now just attempt to "
"deliver the network packets, and don't expect acknowledgement from the "
"consumer. We see now that some of the frame on the ``showimage`` side "
"were dropped, the frame numbers in the shell running ``showimage`` won't "
"be consecutive anymore:"
msgstr ""

msgid "Best effort image transfer"
msgstr ""

#: ../../source/Tutorials/Quality-of-Service.rst:183
msgid "When you're done, remember to delete the queueing discipline:"
msgstr ""

