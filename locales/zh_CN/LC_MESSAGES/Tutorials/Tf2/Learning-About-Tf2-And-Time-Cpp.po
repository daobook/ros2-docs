# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 10:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:4
msgid "Learning about tf2 and time (C++)"
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:6
msgid ""
"**Goal:** Learn how to get a transform at a specific time and wait for a "
"transform to be available on the tf2 tree using ``lookupTransform()`` "
"function."
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:8
msgid "**Tutorial level:** Intermediate"
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:10
msgid "**Time:** 10 minutes"
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:14
msgid "Contents"
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:17
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:19
msgid ""
"In previous tutorials, we recreated the turtle demo by writing a "
":doc:`tf2 broadcaster <Writing-A-Tf2-Broadcaster-Cpp>` and a :doc:`tf2 "
"listener <Writing-A-Tf2-Listener-Cpp>`. We also learned how to :doc:`add "
"a new frame to the transformation tree <./Adding-A-Frame-Cpp>` and "
"learned how tf2 keeps track of a tree of coordinate frames. This tree "
"changes over time, and tf2 stores a time snapshot for every transform "
"(for up to 10 seconds by default). Until now we used the "
"``lookpTransform()`` function to get access to the latest available "
"transforms in that tf2 tree, without knowing at what time that transform "
"was recorded. This tutorial will teach you how to get a transform at a "
"specific time."
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:26
msgid "Tasks"
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:29
msgid "1 tf2 and time"
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:31
msgid ""
"So let's go back to where we ended in the :doc:`adding a frame tutorial "
"<./Adding-A-Frame-Cpp>`. Go to ``learning_tf2_cpp`` package. Open "
"``turtle_tf2_listener.cpp`` and take a look at the ``lookupTransform()`` "
"call:"
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:42
msgid ""
"You can see that we specified a time equal to 0 by calling "
"``tf2::TimePointZero``. For tf2, time 0 means \"the latest available\" "
"transform in the buffer. Now, change this line to get the transform at "
"the current time, ``this->get_clock()->now()``:"
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:54
msgid "Now try to run the launch file."
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:60
msgid "You will notice that it fails and outputs something similar to this:"
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:68
msgid ""
"It tells you that the frame does not exist or that the data is in the "
"future."
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:70
msgid ""
"To understand why is this happening we need to understand how buffers "
"work. Firstly, each listener has a buffer where it stores all the "
"coordinate transforms coming from the different tf2 broadcasters. "
"Secondly, when a broadcaster sends out a transform, it takes some time "
"before that transform gets into the buffer (usually a couple of "
"milliseconds). As a result, when you request a frame transform at time "
"\"now\", you should wait a few milliseconds for that information to "
"arrive."
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:76
msgid "2 Wait for transforms"
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:78
msgid ""
"tf2 provides a nice tool that will wait until a transform becomes "
"available. You use this by adding a timeout parameter to "
"``lookupTransform()``. To fix this, edit your code as shown below (add "
"the last timeout parameter):"
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:91
msgid ""
"The ``lookupTransform()`` can take four arguments, where the last one is "
"an optional timeout. It will block for up to that duration waiting for it"
" to timeout."
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:95
msgid "3 Checking the results"
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:97
msgid "You can now run the launch file."
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:103
msgid ""
"You should notice that ``lookupTransform()`` will actually block until "
"the transform between the two turtles becomes available (this will "
"usually take a few milliseconds). Once the timeout has been reached "
"(fifty milliseconds in this case), an exception will be raised only if "
"the transform is still not available."
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:107
msgid "Summary"
msgstr ""

#: ../../source/Tutorials/Tf2/Learning-About-Tf2-And-Time-Cpp.rst:109
msgid ""
"In this tutorial, you learned how to acquire a transform at a specific "
"timestamp and how to wait for a transform to be available on the tf2 tree"
" when using the ``lookupTransform()`` function."
msgstr ""

