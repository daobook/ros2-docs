# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 10:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:4
msgid "Writing a tf2 static broadcaster (C++)"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:6
msgid "**Goal:** Learn how to broadcast static coordinate frames to tf2."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:8
msgid "**Tutorial level:** Intermediate"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:10
msgid "**Time:** 15 minutes"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:14
msgid "Contents"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:17
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:19
msgid ""
"Publishing static transforms is useful to define the relationship between"
" a robot base and its sensors or non-moving parts. For example, it is "
"easiest to reason about laser scan measurements in a frame at the center "
"of the laser scanner."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:22
msgid ""
"This is a standalone tutorial covering the basics of static transforms, "
"which consists of two parts. In the first part we will write code to "
"publish static transforms to tf2. In the second part we will explain how "
"to use the commandline ``static_transform_publisher`` executable tool in "
"``tf2_ros``."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:26
msgid ""
"In the next two tutorials we will write the code to reproduce the demo "
"from the :doc:`Introduction to tf2 <./Introduction-To-Tf2>` tutorial. "
"After that, the following tutorials focus on extending the demo with more"
" advanced tf2 features."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:30
msgid "Prerequisites"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:32
msgid ""
"In previous tutorials, you learned how to :doc:`create a workspace "
"<../Workspace/Creating-A-Workspace>` and :doc:`create a package "
"<../Creating-Your-First-ROS2-Package>`."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:35
msgid "Tasks"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:38
msgid "1 Create a package"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:40
msgid ""
"First we will create a package that will be used for this tutorial and "
"the following ones. The package called ``learning_tf2_cpp`` will depend "
"on ``rclcpp``, ``tf2``, ``tf2_ros``, ``geometry_msgs``, and "
"``turtlesim``. Code for this tutorial is stored `here "
"<https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_cpp/src/static_turtle_tf2_broadcaster.cpp>`_."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:44
msgid ""
"Open a new terminal and :doc:`source your ROS 2 installation "
"<../Configuring-ROS2-Environment>` so that ``ros2`` commands will work. "
"Navigate to workspace's ``src`` folder and create a new package:"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:51
msgid ""
"Your terminal will return a message verifying the creation of your "
"package ``learning_tf2_cpp`` and all its necessary files and folders."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:54
msgid "2 Write the static broadcaster node"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:56
msgid ""
"Let's first create the source files. Inside the "
"``src/learning_tf2_cpp/src`` directory download the example static "
"broadcaster code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:61
#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:314
#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:332
#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:354
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:67
#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:320
#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:338
#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:360
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:73
#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:324
#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:344
#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:366
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:75
msgid "In a Windows command line prompt:"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:81
msgid "Or in powershell:"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:87
msgid "Open the file using your preferred text editor."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:169
msgid "2.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:171
msgid ""
"Now let's look at the code that is relevant to publishing the static "
"turtle pose to tf2. The first lines include the required header files. "
"First we include ``geometry_msgs/msg/transform_stamped.hpp`` to access "
"the ``TransformStamped`` message type, which we will publish to the "
"transformation tree."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:179
msgid ""
"Afterward, ``rclcpp`` is included so its ``rclcpp::Node`` class can be "
"used."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:185
msgid ""
"``tf2::Quaternion`` is a class for a quaternion that provides convenient "
"functions for converting Euler angles to quaternions and vice versa. We "
"also include ``tf2_ros/static_transform_broadcaster.h`` to use the "
"``StaticTransformBroadcaster`` to make the publishing of static "
"transforms easy."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:193
msgid ""
"The ``StaticFramePublisher`` class constructor initializes the node with "
"the name ``static_turtle_tf2_broadcaster``. Then, "
"``StaticTransformBroadcaster`` is created, which will send one static "
"transformation upon the startup."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:202
msgid ""
"Here we create a ``TransformStamped`` object, which will be the message "
"we will send over once populated. Before passing the actual transform "
"values we need to give it the appropriate metadata."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:205
msgid ""
"We need to give the transform being published a timestamp and we'll just "
"stamp it with the current time, ``this->get_clock()->now()``"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:207
msgid ""
"Then we need to set the name of the parent frame of the link we're "
"creating, in this case ``world``"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:209
msgid ""
"Finally, we need to set the name of the child frame of the link we're "
"creating"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:220
msgid "Here we populate the 6D pose (translation and rotation) of the turtle."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:237
msgid ""
"Finally, we broadcast static transform using the ``sendTransform()`` "
"function."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:244
msgid "2.2 Add dependencies"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:246
msgid ""
"Navigate one level back to the ``src/learning_tf2_cpp`` directory, where "
"the ``CMakeLists.txt`` and ``package.xml`` files have been created for "
"you."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:248
msgid "Open ``package.xml`` with your text editor."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:250
msgid ""
"As mentioned in the :doc:`Creating your first ROS 2 package tutorial "
"<../Creating-Your-First-ROS2-Package>`, make sure to fill in the "
"``<description>``, ``<maintainer>`` and ``<license>`` tags:"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:258
msgid ""
"After the lines above, add the following dependencies corresponding to "
"your nodeâ€™s include statements:"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:268
msgid ""
"This declares the required ``geometry_msgs``, ``rclcpp``, ``tf2``, "
"``tf2_ros``, and ``turtlesim`` dependencies when its code is built and "
"executed."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:270
msgid "Make sure to save the file."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:273
msgid "2.3 CMakeLists.txt"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:275
msgid ""
"Now open the CMakeLists.txt file. Below the existing dependency "
"``find_package(ament_cmake REQUIRED)``, add the lines:"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:285
msgid ""
"After that, add the executable and name it "
"``static_turtle_tf2_broadcaster``, which you'll use later with ``ros2 "
"run``."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:299
msgid ""
"Finally, add the ``install(TARGETSâ€¦)`` section so ``ros2 run`` can find "
"your executable:"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:308
msgid "3 Build and run"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:310
msgid ""
"It's good practice to run ``rosdep`` in the root of your workspace to "
"check for missing dependencies before building:"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:322
#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:326
msgid ""
"rosdep only runs on Linux, so you will need to install ``geometry_msgs`` "
"and ``turtlesim`` dependencies yourself"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:328
msgid "Still in the root of your workspace, build your new package:"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:350
msgid ""
"Open a new terminal, navigate to the root of your workspace, and source "
"the setup files:"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:376
msgid "Now run the ``static_turtle_tf2_broadcaster`` node:"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:382
msgid ""
"This sets a turtle pose broadcast for ``mystaticturtle`` to float 1 meter"
" above the ground."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:384
msgid ""
"We can now check that the static transform has been published by echoing "
"the ``tf_static`` topic"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:390
msgid "If everything went well you should see a single static transform"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:413
msgid "The proper way to publish static transforms"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:415
msgid ""
"This tutorial aimed to show how ``StaticTransformBroadcaster`` can be "
"used to publish static transforms. In your real development process you "
"shouldn't have to write this code yourself and should use the dedicated "
"``tf2_ros`` tool to do so. ``tf2_ros`` provides an executable named "
"``static_transform_publisher`` that can be used either as a commandline "
"tool or a node that you can add to your launchfiles."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:419
msgid ""
"Publish a static coordinate transform to tf2 using an x/y/z offset in "
"meters and roll/pitch/yaw in radians. In our case, roll/pitch/yaw refers "
"to rotation about the x/y/z-axis, respectively."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:426
msgid ""
"Publish a static coordinate transform to tf2 using an x/y/z offset in "
"meters and quaternion."
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:432
msgid ""
"``static_transform_publisher`` is designed both as a command-line tool "
"for manual use, as well as for use within ``launch`` files for setting "
"static transforms. For example:"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:449
msgid "Summary"
msgstr ""

#: ../../source/Tutorials/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst:451
msgid ""
"In this tutorial you learned how static transforms are useful to define "
"static relationships between frames, like ``mystaticturtle`` in relation "
"to the ``world`` frame. In addition, you learned how static transforms "
"can be useful for understanding sensor data, such as from laser scanners,"
" by relating the data to a common coordinate frame. Finally, you wrote "
"your own node to publish static transforms to tf2 and learned how to "
"publish required static transformations using "
"``static_transform_publisher`` executable and launch files."
msgstr ""

