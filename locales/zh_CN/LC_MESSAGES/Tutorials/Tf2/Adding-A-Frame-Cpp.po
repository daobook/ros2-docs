# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-16 10:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:4
msgid "Adding a frame (C++)"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:6
msgid "**Goal:** Learn how to to add an extra frame to tf2."
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:8
msgid "**Tutorial level:** Intermediate"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:10
msgid "**Time:** 15 minutes"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:14
msgid "Contents"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:17
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:19
msgid ""
"In previous tutorials, we recreated the turtle demo by writing a "
":doc:`tf2 broadcaster <./Writing-A-Tf2-Broadcaster-Cpp>` and a :doc:`tf2 "
"listener <Writing-A-Tf2-Listener-Cpp>`. This tutorial will teach you how "
"to add extra fixed and dynamic frames to the transformation tree. In "
"fact, adding a frame in tf2 is very similar to creating the tf2 "
"broadcaster, but this example will show you some additional features of "
"tf2."
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:23
msgid ""
"For many tasks related to transformations, it is easier to think inside a"
" local frame. For example, it is easiest to reason about laser scan "
"measurements in a frame at the center of the laser scanner. tf2 allows "
"you to define a local frame for each sensor, link, or joint in your "
"system. When transforming from one frame to another, tf2 will take care "
"of all the hidden intermediate frame transformations that are introduced."
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:29
msgid "tf2 tree"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:31
msgid ""
"tf2 builds up a tree structure of frames and, thus, does not allow a "
"closed loop in the frame structure. This means that a frame only has one "
"single parent, but it can have multiple children. Currently, our tf2 tree"
" contains three frames: ``world``, ``turtle1`` and ``turtle2``. The two "
"turtle frames are children of the ``world`` frame. If we want to add a "
"new frame to tf2, one of the three existing frames needs to be the parent"
" frame, and the new one will become its child frame."
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:40
msgid "Tasks"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:43
msgid "1 Write the fixed frame broadcaster"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:45
msgid ""
"In our turtle example, we'll add a new frame ``carrot1``, which will be "
"the child of the ``turtle1``. This frame will serve as the goal for the "
"second turtle."
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:48
msgid ""
"Let's first create the source files. Go to the ``learning_tf2_cpp`` "
"package we created in the previous tutorials. Download the fixed frame "
"broadcaster code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:53
#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:255
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:59
#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:261
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:65
#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:267
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:67
#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:269
msgid "In a Windows command line prompt:"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:73
#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:275
msgid "Or in powershell:"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:79
msgid "Now open the file called ``fixed_frame_tf2_broadcaster.cpp``."
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:134
msgid ""
"Don't forget to add the executable in the ``CMakeLists.txt``. The code is"
" very similar to the tf2 broadcaster tutorial example and the only "
"difference is that the transform here does not change over time."
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:138
msgid "1.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:140
msgid ""
"Let's take a look at the key lines in this piece of code. Here we create "
"a new transform, from the parent ``turtle1`` to the new child "
"``carrot1``. The ``carrot1`` frame is 2 meters offset in y axis in terms "
"of the ``turtle1`` frame."
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:156
msgid "1.2 Write the launch file"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:158
msgid ""
"Now let's create a launch file for this example. With your text editor, "
"create a new file called ``turtle_tf2_fixed_frame_demo.launch.py``, and "
"add the following lines:"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:191
msgid ""
"This launch file imports the required packages and then creates a "
"``demo_nodes`` variable that will store nodes that we created in the "
"previous tutorial's launch file."
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:193
msgid ""
"The last part of the code will add our fixed ``carrot1`` frame to the "
"turtlesim world using our ``fixed_frame_tf2_broadcaster`` node."
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:204
msgid "1.3 Build and run"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:206
msgid "Rebuild the package and start the turtle broadcaster demo:"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:212
msgid ""
"You should notice that the new ``carrot1`` frame appeared in the "
"transformation tree."
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:217
msgid "1.4 Checking the results"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:219
msgid ""
"If you drive the first turtle around, you should notice that the behavior"
" didn't change from the previous tutorial, even though we added a new "
"frame. That's because adding an extra frame does not affect the other "
"frames and our listener is still using the previously defined frames."
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:222
msgid ""
"Therefore if we want our second turtle to follow the carrot instead of "
"the first turtle, we need to change value of the ``target_frame``. This "
"can be done two ways. One way is to pass the ``target_frame`` argument to"
" the launch file directly from the console:"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:230
msgid ""
"The second way is to update the launch file. To do so, open the "
"``turtle_tf2_fixed_frame_demo.launch.py`` file, and add the "
"``'target_frame': 'carrot1'`` parameter via ``launch_arguments`` "
"argument."
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:241
msgid ""
"Now just rebuild the package, restart the "
"``turtle_tf2_fixed_frame_demo.launch.py``, and you'll see the second "
"turtle following the carrot instead of the first turtle!"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:246
msgid "2 Write the dynamic frame broadcaster"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:248
msgid ""
"The extra frame we published in this tutorial is a fixed frame that "
"doesn't change over time in relation to the parent frame. However, if you"
" want to publish a moving frame you can code the broadcaster to change "
"the frame over time. Let's change our ``carrot1`` frame so that it "
"changes relative to ``turtle1`` frame over time. Now download the dynamic"
" frame broadcaster code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:281
msgid "Now open the file called ``dynamic_frame_tf2_broadcaster.cpp``:"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:340
msgid "2.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:342
msgid ""
"Instead of a fixed definition of our x and y offsets, we are using the "
"``sin()`` and ``cos()`` functions on the current time so that the offset "
"of ``carrot1`` is constantly changing."
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:352
msgid "2.2 Write the launch file"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:354
msgid ""
"To test this code, create a new launch file "
"``turtle_tf2_dynamic_frame_demo.launch.py`` and paste the following code:"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:387
msgid "2.3 Build and run"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:389
msgid ""
"Rebuild the package, and start the "
"``turtle_tf2_dynamic_frame_demo.launch.py`` launch file, and now youâ€™ll "
"see that the second turtle is following the carrot's position that is "
"constantly changing."
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:394
msgid "Summary"
msgstr ""

#: ../../source/Tutorials/Tf2/Adding-A-Frame-Cpp.rst:396
msgid ""
"In this tutorial, you learned about the tf2 transformation tree, its "
"structure, and its features. You also learned that it is easiest to think"
" inside a local frame, and learned to add extra fixed and dynamic frames "
"for that local frame."
msgstr ""

